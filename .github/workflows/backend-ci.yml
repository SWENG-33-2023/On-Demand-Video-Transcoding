name: backendci

on:
  push:
    branches:
      - "cdsetup"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Set up Python 3
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - 
        uses: actions/cache@v3
        id: cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.*') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - 
        name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - 
        name: Run pytest
        run: |
          pytest
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - 
        name: Determine version
        uses: paulhatch/semantic-version@v5.0.2
        id: version_step
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
          major_regexp_flags: ""
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
          minor_regexp_flags: ""
          # A string to determine the format of the version output
          version_format: "${major}.${minor}.${patch}-prerelease${increment}"  
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false
          # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
          search_commit_body: false
          # The output method used to generate list of users, 'csv' or 'json'.
          user_format_type: "csv"
      -
        name: Print version
        run: echo ${{ steps.version_step.outputs.version}}
      -
        name: Build and push
        uses: docker/build-push-action@v4
        with:
          file: ./back-end/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_REPO_BACKEND}}:${{ steps.version_step.outputs.version}}
          
      - name: Create Release Version
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: ${{ steps.version_step.outputs.version}}
          release_name: Release ${{ steps.version_step.outputs.version}}
          draft: false
          prerelease: false
